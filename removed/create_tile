/*
			//controllo i lati dei tile di bordo
			if(row == 0){ //bordo immagine superiore

				if((col == 0)||(tileCol == 0)){//angolo immagine superiore sinistro
					for(b = 0; b < TILE_WIDTH / 2; b++)
						imgTile[tileRow + i][tileCol + i] = element;
				}

				if((col == imageWidth - 1)||(tileCol == TILE_WIDTH - 1)){//angolo immagine superiore destro
					for(b = 0; b < TILE_WIDTH / 2; b++)
						imgTile[tileRow][tileCol+2] = element;
				}
				imgTile[tileRow][tileCol+1] = element;
			}
			else if(row == imageHeight - 1){ //bordo immagine inferiore

				if((col == 0)||(tileCol == 0))//angolo immagine inferiore sinistro
					imgTile[tileRow+2][tileCol] = element;

				if((col == imageWidth - 1)||(tileCol == TILE_WIDTH - 1))//angolo immagine inferiore destro
					imgTile[tileRow+2][tileCol+2] = element;

				imgTile[tileRow+2][tileCol+1] = element;
			}

			if(col == 0){//bordo immagine sinistro
				if(tileRow == 0)
					imgTile[tileRow][tileCol] = element;
				if(tileRow == TILE_WIDTH -1)
					imgTile[tileRow+2][tileCol] = element;
				imgTile[tileRow+1][tileCol] = element;
			}
			else if(col == imageWidth - 1){//bordo immagine destro
				if(tileRow == 0)
					imgTile[tileRow][tileCol+2] = element;
				if(tileRow == TILE_WIDTH -1)
					imgTile[tileRow+2][tileCol+2] = element;
				imgTile[tileRow+1][tileCol+2] = element;
			}
*/
/*

			//controllo i lati dei tile centrali
			//lato superiore
			if(tileRow == 0){

				// angolo superiore sinistro
				if(tileCol == 0){
					if(col == 0 && row == 0){
						for(a = 0; a < border+1; a++){
							for(b = 0; b < border+1; b++)
								imgTile[a][tileCol+b]=element;
						}
					}
					else{
						for(a = 0; a < border+1; a++){
							for(b = 0; b < border+1; b++)
								imgTile[a][tileCol+b]=img[((row-border+a) * imageWidth + (col-border+b)) * imageChannels + c];
						}
					}
				}
				//angolo superiore destro
				else if(tileCol == TILE_WIDTH - 1){
					if(row == 0 && col == imageWidth - 1){
						for(a = 0; a < border+1; a++){
							for(b = 0; b < border+1; b++)
								imgTile[a][tileCol+b]=element;
						}
					}
					else{
						for(a = 0; a < border; a++){
							for(b = 0; b < border; b++)
								imgTile[a][tileCol+b]=img[((row-border+a) * imageWidth + (col-border+b)) * imageChannels + c];
						}

					}
				}

				else{
					if(row == 0){
						for(a = 0; a < border; a++)
							imgTile[border-a][tileCol+border]=element;
					}
					else{
						for(a = 0; a < border; a++)
							imgTile[border-a][tileCol+border]=img[((row-1) * imageWidth + col) * imageChannels + c];
					}
				}

			}

			//lato inferiore
			if(tileRow == TILE_WIDTH - 1){

				// angolo inferiore sinistro
				if(tileCol == 0){
					if(col == 0 && row == imageHeight - 1){
						for(a = 0; a < border+1; a++){
							for(b = 0; b < border+1; b++)
								imgTile[tileRow+a][tileCol+b]=element;
						}
					}
					else{
						for(a = 0; a < border+1; a++){
							for(b = 0; b < border+1; b++)
								imgTile[tileRow+a][tileCol+b]=img[((row-border+a) * imageWidth + (col-border+b)) * imageChannels + c];
						}
					}
				}
				//angolo inferiore destro
				else if(tileCol == TILE_WIDTH - 1){
					if(row == 0 && col == imageWidth - 1){
						for(a = 0; a < border+1; a++){
							for(b = 0; b < border+1; b++)
								imgTile[a][tileCol+b]=element;
						}
					}
					else{
						for(a = 0; a < border+1; a++){
							for(b = 0; b < border+1; b++)
								imgTile[a][tileCol+b]=img[((row-border+a) * imageWidth + (col-border+b)) * imageChannels + c];
						}

					}
				}

				else{
					if(row == 0){
						for(a = 0; a < border+1; a++)
							imgTile[tileRow+a][tileCol+border]=element;
					}
					else{
						for(a = 0; a < border+1; a++)
							imgTile[tileRow+a][tileCol+border]=img[((row+a) * imageWidth + col) * imageChannels + c];
					}
				}
			}





			//lato sinistro
			if((tileCol == 0)&&(tileRow > 0)&&(tileRow<TILE_WIDTH-1)){
				for(a = 0; a < border+1; a++)
					imgTile[tileRow+border][tileCol+a]=img[((row) * imageWidth + (col+a)) * imageChannels + c];
			}

			//lato destro
			if((tileCol == TILE_WIDTH - 1)&&(tileRow>0)&&(tileRow<TILE_WIDTH-1)){
				for(a = 0; a < border+1; a++)
					imgTile[tileRow+BORDER][tileCol+a]=img[((row) * imageWidth + (col+a)) * imageChannels + c];
			}
